          if (node[nodeNames[element.name]].isOutputVertex) {
            console.log(element);

            if (index == 0) {
              /**
               * node which has both down and output vertex
               */
              if (node[nodeNames[element.name]].isDownVertex) {
                console.log(element.name);
                const outputEdge = parseEdges.filter(
                  (item: any) => item.sourceNodeId === element.id
                );
                const outputVertex = outputEdge
                  .map((item: any) => {
                    const targetNode = parseNodes.find(
                      (node: any) => node.id === item.targetNodeId
                    );
                    if (!node[nodeNames[targetNode.name]].isUpVertex) {
                      return item.sourcePortId;
                    }
                  })
                  .filter(Boolean);
                console.log(outputVertex);
                const downVertex = outputEdge
                  .map((item: any) => {
                    const targetNode = parseNodes.find(
                      (node: any) => node.id === item.targetNodeId
                    );
                    if (node[nodeNames[targetNode.name]].isUpVertex) {
                      return item.sourcePortId;
                    }
                  })
                  .filter(Boolean);
                console.log("down", downVertex);
                const inputEdge = parseEdges.filter(
                  (item: any) => item.targetNodeId === element.id
                );
                const inputVertex = inputEdge.map(
                  (item: any) => item.targetPortId
                );
                console.log("hey its input vertex", inputVertex);
                // const restNumberOutput = Math.abs(
                //   node[nodeNames[element.name]].numberOutputs -
                //     outputVertex.length
                // );
                makingNode({
                  nodeId: element.id,
                  currentPosition: element.position,
                  nodeName: nodeNames[element.name],
                  inputVertexIds: inputVertex,
                  outputVertexIds: outputVertex,
                  downVertexIds: downVertex,
                  // restNumberInput: 1,
                  restDownVertexNumber: 2,
                });

                console.log("from test ", nodes());

                // const prevVertexId = horizontalCurrentNode()
                //   ?.outputVertexIds.map((item: any) => {
                //     console.log("from text", item);
                //     const edge = parseEdges.find((opt: any) => {
                //       console.log("from test2", opt);
                //       return opt.sourcePortId === item;
                //     });
                //     console.log("from test3", edge);
                //     return edge;
                //   })
                //   .find((e: any) => e.targetNodeId === element.id).sourcePortId;

                // makingEdge(prevVertexId, inputVertex[0]);
                // setHorizontalCurrentNode(
                //   nodes().find((item: CustomNode) => item.id === element.id) ??
                //     null
                // );
                setHorizontalCurrentNode(
                  nodes().find((item: CustomNode) => item.id === element.id) ??
                    null
                );
                setVerticalCurrentNode(
                  nodes().find((item: CustomNode) => item.id === element.id) ??
                    null
                );
              } else {
                const outputEdge = parseEdges.filter(
                  (item: any) => item.sourceNodeId === element.id
                );
                const outputVertex = outputEdge.map(
                  (item: any) => item.sourcePortId
                );
                const inputEdge = parseEdges.filter(
                  (item: any) => item.targetNodeId === element.id
                );
                const inputVertex = inputEdge.map(
                  (item: any) => item.targetPortId
                );
                const restNumberOutput = Math.abs(
                  node[nodeNames[element.name]].numberOutputs -
                    outputVertex.length
                );
                makingNode({
                  nodeId: element.id,
                  currentPosition: element.position,
                  nodeName: nodeNames[element.name],
                  outputVertexIds: outputVertex,
                  inputVertexIds: inputVertex,
                  restNumberOutput: restNumberOutput,
                });
                setHorizontalCurrentNode(
                  nodes().find((item: CustomNode) => item.id === element.id) ??
                    null
                );
              }
            } else {
              if (node[nodeNames[element.name]].isDownVertex) {
                console.log(element.name);
                const outputEdge = parseEdges.filter(
                  (item: any) => item.sourceNodeId === element.id
                );
                const outputVertex = outputEdge
                  .map((item: any) => {
                    const targetNode = parseNodes.find(
                      (node: any) => node.id === item.targetNodeId
                    );
                    if (!node[nodeNames[targetNode.name]].isUpVertex) {
                      return item.sourcePortId;
                    }
                  })
                  .filter(Boolean);
                console.log(outputVertex);
                const downVertex = outputEdge
                  .map((item: any) => {
                    const targetNode = parseNodes.find(
                      (node: any) => node.id === item.targetNodeId
                    );
                    if (node[nodeNames[targetNode.name]].isUpVertex) {
                      return item.sourcePortId;
                    }
                  })
                  .filter(Boolean);
                console.log("down", downVertex);
                const inputEdge = parseEdges.filter(
                  (item: any) => item.targetNodeId === element.id
                );
                const inputVertex = inputEdge.map(
                  (item: any) => item.targetPortId
                );
                // const restNumberOutput = Math.abs(
                //   node[nodeNames[element.name]].numberOutputs -
                //     outputVertex.length
                // );
                makingNode({
                  nodeId: element.id,
                  currentPosition: element.position,
                  nodeName: nodeNames[element.name],
                  inputVertexIds: inputVertex,
                  outputVertexIds: outputVertex,
                  downVertexIds: downVertex,
                  // restNumberInput: 1,
                  restDownVertexNumber: 2,
                });
                // const restNumberOutput = Math.abs(
                //   node[nodeNames[element.name]].numberOutputs -
                //     outputVertex.length
                // );

                const prevVertexId = horizontalCurrentNode()
                  ?.outputVertexIds.map((item: any) => {
                    console.log("from text", item);
                    const edge = parseEdges.find((opt: any) => {
                      console.log("from test2", opt);
                      return opt.sourcePortId === item;
                    });
                    console.log("from test3", edge);
                    return edge;
                  })
                  .find((e: any) => e.targetNodeId === element.id).sourcePortId;

                makingEdge(prevVertexId, inputVertex[0], "solid");
                setHorizontalCurrentNode(
                  nodes().find((item: CustomNode) => item.id === element.id) ??
                    null
                );
                setVerticalCurrentNode(
                  nodes().find((item: CustomNode) => item.id === element.id) ??
                    null
                );
              } else {
                const outputEdge = parseEdges.filter(
                  (item: any) => item.sourceNodeId === element.id
                );
                const outputVertex = outputEdge.map(
                  (item: any) => item.sourcePortId
                );
                const inputEdge = parseEdges.filter(
                  (item: any) => item.targetNodeId === element.id
                );
                const inputVertex = inputEdge.map(
                  (item: any) => item.targetPortId
                );
                const restNumberOutput = Math.abs(
                  node[nodeNames[element.name]].numberOutputs -
                    outputVertex.length
                );
                makingNode({
                  nodeId: element.id,
                  currentPosition: element.position,
                  nodeName: nodeNames[element.name],
                  inputVertexIds: inputVertex,
                  outputVertexIds: outputVertex,
                  restNumberOutput: restNumberOutput,
                });

                const prevVertexId = horizontalCurrentNode()
                  ?.outputVertexIds.map((item: any) => {
                    console.log("from text", item);
                    const edge = parseEdges.find((opt: any) => {
                      console.log("from test2", opt);
                      return opt.sourcePortId === item;
                    });
                    console.log("from test3", edge);
                    return edge;
                  })
                  .find((e: any) => e.targetNodeId === element.id).sourcePortId;

                makingEdge(prevVertexId, inputVertex[0], "solid");
                setHorizontalCurrentNode(
                  nodes().find((item: CustomNode) => item.id === element.id) ??
                    null
                );
              }
            }
          } else if (node[nodeNames[element.name]].isUpVertex) {
            console.log(element);

            if (node[nodeNames[element.name]].isDownVertex) {
              const upEdge = parseEdges.filter(
                (item: any) => item.sourceNodeId === element.id
              );
              const upVertex = upEdge.map((item: any) => item.sourcePortId);
              const downEdge = parseEdges.filter(
                (item: any) => item.targetNodeId === element.id
              );
              const downVertex = downEdge.map((item: any) => item.targetPortId);
              console.log("down vertex idsssss", down);
              const restNumberDown = Math.abs(
                node[nodeNames[element.name]].downVertexNumber -
                  downVertex.length
              );

              makingNode({
                nodeId: element.id,
                currentPosition: element.position,
                nodeName: nodeNames[element.name],
                upVertexIds: upVertex,
                downVertexIds: downVertex,
                restDownVertexNumber:
                  downVertex.length === restNumberDown ? 0 : restNumberDown,
              });

              console.log("from down up", nodes());

              const prevVertexId = verticalCurrentNode()
                ?.downVertexIds.map((item: any) => {
                  console.log("from text", item);
                  const edge = parseEdges.find((opt: any) => {
                    console.log("from test2", opt);
                    return opt.sourcePortId === item;
                  });
                  console.log("from test3", edge);
                  return edge;
                })
                .find((e: any) => e.targetNodeId === element.id).sourcePortId;
              console.log("prev", prevVertexId);

              makingEdge(prevVertexId, upVertex[0], "dash");

              setVerticalCurrentNode(
                nodes().find((item: CustomNode) => item.id === element.id) ??
                  null
              );
            } else {
              const upEdge = parseEdges.filter(
                (item: any) => item.targetNodeId === element.id
              );
              const upVertex = upEdge.map((item: any) => item.targetPortId);
              console.log("only up", upEdge);

              makingNode({
                nodeId: element.id,
                currentPosition: element.position,
                nodeName: nodeNames[element.name],
                upVertexIds: upVertex,
              });
              const sourceNode = parseNodes.find(
                (node: any) => node.id === upEdge[0].sourceNodeId
              );

              const prevVertexId = verticalCurrentNode()
                ?.downVertexIds.map((item: any) => {
                  console.log("from text", item);
                  const edge = parseEdges.find((opt: any) => {
                    console.log("from test2", opt);
                    return opt.sourcePortId === item;
                  });
                  console.log("from test3", edge);
                  return edge;
                })
                .find((e: any) => e.targetNodeId === element.id).sourcePortId;
              console.log("prev", prevVertexId);

              makingEdge(prevVertexId, upVertex[0], "dash");
            }
          }